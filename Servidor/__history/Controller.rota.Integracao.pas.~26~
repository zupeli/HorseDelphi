unit Controller.rota.Integracao;

interface

uses Horse, System.JSON, System.SysUtils, uIntegracao, uEndereco;

  procedure RegistarRotaIntegracao;
  procedure listarEndereco(Req: ThorseRequest; Res: THorseResponse; Next: Tproc);
//  procedure Listar_CEP(Req: ThorseRequest; Res: THorseResponse; Next: Tproc);
  procedure listarEnderecoIntegracao(Req: ThorseRequest; Res: THorseResponse; Next: Tproc);
  procedure InserirEnderecoCEP(Req: ThorseRequest; Res: THorseResponse; Next: Tproc);
  procedure InserirEnderecoIntegracao(Req: ThorseRequest; Res: THorseResponse; Next: Tproc);
  procedure ExcluirEnderecoIntegracao(Req: ThorseRequest; Res: THorseResponse; Next: Tproc);
  procedure ExcluirEndereco(Req: ThorseRequest; Res: THorseResponse; Next: Tproc);
  procedure EditarEnderecoCEP(Req: ThorseRequest; Res: THorseResponse; Next: Tproc);
  procedure EditarEnderecoIntegracao(Req: ThorseRequest; Res: THorseResponse; Next: Tproc);
implementation


procedure RegistarRotaIntegracao;
begin

  Thorse.Get('/endereco/integracao/:id_endereco'     , listarEnderecoIntegracao);
  Thorse.Get('/endereco/:id_pessoa'                  , listarEndereco);
//  Thorse.Get('/endereco/:cep'                      , Listar_CEP);
  Thorse.post('/endereco/integracao'                 , InserirEnderecoIntegracao);
  Thorse.post('/endereco'                            , InserirEnderecoCEP);
  Thorse.Delete('/endereco/integracao/:id_endereco'  , ExcluirEnderecoIntegracao);
  Thorse.Delete('/endereco/:id_endereco'             , ExcluirEndereco);
  Thorse.put('/endereco/:id_pessoa'                  , EditarEnderecoCEP);
  Thorse.put('/endereco/integracao'                  , EditarEnderecoIntegracao);

end;


procedure listarEnderecoIntegracao(Req: ThorseRequest; Res: THorseResponse; Next: Tproc);
var
  vOjbIntegracao : TIntegracao;

begin
  try
    vOjbIntegracao := TIntegracao.Create;
    try
      vOjbIntegracao.idEndereco := Req.Params['id_endereco'].ToInteger;
    except
      vOjbIntegracao.idEndereco := 0;
    end;

    try
      Res.Send<TJsonArray>(vOjbIntegracao.Listar);

    except on ex:exception do
      Res.Send('Ocorreu um erro: ' + ex.Message).Status(500);
    end;

  finally
    FreeAndNil(vOjbIntegracao);
  end;

end;

procedure listarEndereco(Req: ThorseRequest; Res: THorseResponse; Next: Tproc);
var
  vOjbEndereco : TEndereco;
  vIdPessoa : integer;
begin
  try
    vOjbEndereco := TEndereco.Create;
    try
      vIdPessoa := Req.Params['id_pessoa'].ToInteger;
    except
      vIdPessoa := 0;
    end;

    try
      vOjbEndereco.dsCEP := Req.Query['filtro'];
      Res.Send<TJsonArray>(vOjbEndereco.ListarEndereco(vIdPessoa));

    except on ex:exception do
      Res.Send('Ocorreu um erro: ' + ex.Message).Status(500);
    end;

  finally
    FreeAndNil(vOjbEndereco);
  end;

end;


procedure EditarEnderecoIntegracao(Req: ThorseRequest; Res: THorseResponse; Next: Tproc);
var
  vBody : TJSONObject;
  vOjbIntegracao : TIntegracao;
begin
  try
    vOjbIntegracao := TIntegracao.Create;
    try

      vBody := Req.Body<TJSONObject>;
      vOjbIntegracao.idEndereco  := vBody.GetValue<integer>('idendereco'  ,  0);
      vOjbIntegracao.UF          := vBody.GetValue<string>('dsuf'         , '');
      vOjbIntegracao.Cidade      := vBody.GetValue<string>('nmcidade'     , '');
      vOjbIntegracao.Bairro      := vBody.GetValue<string>('nmbairro'     , '');
      vOjbIntegracao.Logradouro  := vBody.GetValue<string>('nmlogradouro' , '');
      vOjbIntegracao.Complemento := vBody.GetValue<string>('dscomplemento', '');

      Res.Send<TJsonObject>(vOjbIntegracao.Editar).Status(201);
    except on ex:exception do
      Res.Send('Ocorreu um erro: ' + ex.Message).Status(500);
    end;

  finally
    FreeAndNil(vOjbIntegracao);
  end;
end;

procedure EditarEnderecoCEP(Req: ThorseRequest; Res: THorseResponse; Next: Tproc);
var
  vBody : TJSONObject;
  vOjbEndereco : TEndereco;
  vIdPessoa : integer;
begin
  try
    vOjbEndereco := TEndereco.Create;
    try

      try
        vIdPessoa := Req.Params['id_pessoa'].ToInteger;
      except
        vIdPessoa := 0;
      end;

      vBody := Req.Body<TJSONObject>;
      vOjbEndereco.dsCEP      := vBody.GetValue<string>('dscep'      , '');
      vOjbEndereco.idEndereco := vBody.GetValue<integer>('idendereco', 0);

      Res.Send<TJsonObject>(vOjbEndereco.EditarEnderecoCEP(vIdPessoa)).Status(201);
    except on ex:exception do
      Res.Send('Ocorreu um erro: ' + ex.Message).Status(500);
    end;

  finally
    FreeAndNil(vOjbEndereco);
  end;
end;

procedure InserirEnderecoCEP(Req: ThorseRequest; Res: THorseResponse; Next: Tproc);
var
  vOjbEndereco : TEndereco;
  vIdPessoa    : Integer;
  vBody        : TJSONArray;
  vCont        : integer;
begin
  vOjbEndereco := TEndereco.Create;
  try
    try
      vBody := TJSONObject.ParseJSONValue(TEncoding.UTF8.GetBytes(Req.Body),0) as  TJSONArray;
    except
      vBody.DisposeOf;
      Exit;
    end;

    for vCont := 0 to vBody.Count -1 do
    begin
      vOjbEndereco.dsCEP := vBody[vCont].GetValue<integer>('dsdocumento' , 0);
      vIdPessoa          := vBody[vCont].GetValue<string>('nmprimeiro'   , '');

      Res.Send<TJsonObject>(vOjbEndereco.InserirCEP(vIdPessoa)).Status(200);
    end;

  finally
    FreeAndNil(vOjbEndereco);
    vBody.DisposeOf;
  end;
end;


procedure ExcluirEndereco(Req: ThorseRequest; Res: THorseResponse; Next: Tproc);
var
  vObjEndereco : TEndereco;
  vIdPessoa    : Integer;
begin
  vObjEndereco := TEndereco.Create;
  try
    try
      try
        vObjEndereco.idEndereco := Req.Params['id_endereco'].ToInteger;
      except
        vObjEndereco.idEndereco := 0;
      end;

      vIdPessoa := Req.Query['idpessoa'].ToInteger;

      if (vObjEndereco.idEndereco > 0) and (vIdPessoa > 0) then
      begin
        Res.Send<TJsonObject>(vObjEndereco.ExcluirEndereco(vIdPessoa)).Status(200);
      end
      else
      begin
        Res.Send('Erro ao excluir endereço CEP! ').Status(500);
      end;

    except on ex:exception do
      Res.Send('Ocorreu um erro: ' + ex.Message).Status(500);
    end;
  finally
    FreeAndNil(vObjEndereco);
  end;
end;

procedure ExcluirEnderecoIntegracao(Req: ThorseRequest; Res: THorseResponse; Next: Tproc);
var
  vObjIntegracao : TIntegracao;
begin
  try
    vObjIntegracao := TIntegracao.Create;
    try

      try
        vObjIntegracao.idEndereco := Req.Params['id_endereco'].ToInteger;
      except
        vObjIntegracao.idEndereco := 0;
      end;

      if vObjIntegracao.idEndereco > 0 then
      begin
        Res.Send<TJsonObject>(vObjIntegracao.Excluir).Status(200);
      end
      else
      begin
        Res.Send('Erro ao excluir endereço! ').Status(500);
      end;

    except on ex:exception do
      Res.Send('Ocorreu um erro: ' + ex.Message).Status(500);
    end;
  finally
    FreeAndNil(vObjIntegracao);
  end;
end;

procedure InserirEnderecoIntegracao(Req: ThorseRequest; Res: THorseResponse; Next: Tproc);
var
  vObjIntegracao : TIntegracao;
  vBody          : TJSONObject;
  vIdPessoa      : integer;
begin
  vObjIntegracao := TIntegracao.Create;
  try

    try
      vObjIntegracao.idEndereco := Req.Params['id_endereco'].ToInteger;
    except
      vObjIntegracao.idEndereco := 0;
    end;

    vBody := Req.Body<TJSONObject>;

    vIdPessoa                  := vBody.GetValue<integer>('idpessoa',  0);
    vObjIntegracao.UF          := vBody.GetValue<string>('dsuf'          , '');
    vObjIntegracao.Cidade      := vBody.GetValue<string>('nmcidade'      , '');
    vObjIntegracao.Bairro      := vBody.GetValue<string>('nmbairro'      , '');
    vObjIntegracao.Logradouro  := vBody.GetValue<string>('nmlogradouro'  , '');
    vObjIntegracao.Complemento := vBody.GetValue<string>('dscomplemento' , '');

    if vObjIntegracao.idEndereco > 0 then
    begin
      Res.Send<TJSONObject>(vObjIntegracao.Inserir).Status(200);
    end
    else
    begin
      Res.Send('Erro ao inserir a endereço Integração! ').Status(500);
    end;

  finally
    FreeAndNil(vObjIntegracao);
  end;
end;

end.
